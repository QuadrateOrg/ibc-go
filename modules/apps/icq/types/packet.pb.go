// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: ibc/applications/icq/v1/packet.proto

package types

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	types "github.com/tendermint/tendermint/abci/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// InterchainQueryPacketData is comprised of an ABCI query request and type of query.
type InterchainQueryPacketData struct {
	Request types.RequestQuery `protobuf:"bytes,1,opt,name=request,proto3" json:"request"`
}

func (m *InterchainQueryPacketData) Reset()         { *m = InterchainQueryPacketData{} }
func (m *InterchainQueryPacketData) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryPacketData) ProtoMessage()    {}
func (*InterchainQueryPacketData) Descriptor() ([]byte, []int) {
	return fileDescriptor_841c9ad988725ce1, []int{0}
}
func (m *InterchainQueryPacketData) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryPacketData) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryPacketData.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryPacketData) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryPacketData.Merge(m, src)
}
func (m *InterchainQueryPacketData) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryPacketData) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryPacketData.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryPacketData proto.InternalMessageInfo

func (m *InterchainQueryPacketData) GetRequest() types.RequestQuery {
	if m != nil {
		return m.Request
	}
	return types.RequestQuery{}
}

// InterchainQueryPacketAck is comprised of an ABCI query response with non-deterministic fields left empty (e.g. Codespace, Log, Info and ...).
type InterchainQueryPacketAck struct {
	Response types.ResponseQuery `protobuf:"bytes,1,opt,name=response,proto3" json:"response"`
}

func (m *InterchainQueryPacketAck) Reset()         { *m = InterchainQueryPacketAck{} }
func (m *InterchainQueryPacketAck) String() string { return proto.CompactTextString(m) }
func (*InterchainQueryPacketAck) ProtoMessage()    {}
func (*InterchainQueryPacketAck) Descriptor() ([]byte, []int) {
	return fileDescriptor_841c9ad988725ce1, []int{1}
}
func (m *InterchainQueryPacketAck) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *InterchainQueryPacketAck) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_InterchainQueryPacketAck.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *InterchainQueryPacketAck) XXX_Merge(src proto.Message) {
	xxx_messageInfo_InterchainQueryPacketAck.Merge(m, src)
}
func (m *InterchainQueryPacketAck) XXX_Size() int {
	return m.Size()
}
func (m *InterchainQueryPacketAck) XXX_DiscardUnknown() {
	xxx_messageInfo_InterchainQueryPacketAck.DiscardUnknown(m)
}

var xxx_messageInfo_InterchainQueryPacketAck proto.InternalMessageInfo

func (m *InterchainQueryPacketAck) GetResponse() types.ResponseQuery {
	if m != nil {
		return m.Response
	}
	return types.ResponseQuery{}
}

func init() {
	proto.RegisterType((*InterchainQueryPacketData)(nil), "ibc.applications.icq.v1.InterchainQueryPacketData")
	proto.RegisterType((*InterchainQueryPacketAck)(nil), "ibc.applications.icq.v1.InterchainQueryPacketAck")
}

func init() {
	proto.RegisterFile("ibc/applications/icq/v1/packet.proto", fileDescriptor_841c9ad988725ce1)
}

var fileDescriptor_841c9ad988725ce1 = []byte{
	// 285 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x6c, 0x90, 0xbf, 0x4a, 0x33, 0x41,
	0x14, 0x47, 0x77, 0xe1, 0xe3, 0x53, 0xd6, 0x2e, 0x08, 0xc6, 0x88, 0xa3, 0x04, 0x0b, 0x1b, 0x67,
	0x48, 0x04, 0x3b, 0x41, 0x83, 0x8d, 0x60, 0xa1, 0x29, 0x83, 0xcd, 0xcc, 0xcd, 0xb0, 0xb9, 0x24,
	0x3b, 0x77, 0x32, 0x33, 0xbb, 0x90, 0xb7, 0xf0, 0xb1, 0x52, 0xa6, 0xb4, 0x12, 0xd9, 0x7d, 0x11,
	0xd9, 0x5d, 0xff, 0xa4, 0x48, 0x37, 0x70, 0xcf, 0xef, 0x0c, 0x9c, 0xe4, 0x02, 0x15, 0x08, 0x69,
	0xed, 0x02, 0x41, 0x06, 0x24, 0xe3, 0x05, 0xc2, 0x52, 0x14, 0x03, 0x61, 0x25, 0xcc, 0x75, 0xe0,
	0xd6, 0x51, 0xa0, 0xce, 0x11, 0x2a, 0xe0, 0xdb, 0x14, 0x47, 0x58, 0xf2, 0x62, 0xd0, 0x3b, 0x4c,
	0x29, 0xa5, 0x86, 0x11, 0xf5, 0xab, 0xc5, 0x7b, 0x27, 0x41, 0x9b, 0xa9, 0x76, 0x19, 0x9a, 0x20,
	0xa4, 0x02, 0x14, 0x61, 0x65, 0xb5, 0x6f, 0x8f, 0xfd, 0x49, 0x72, 0xfc, 0x68, 0x82, 0x76, 0x30,
	0x93, 0x68, 0x5e, 0x72, 0xed, 0x56, 0xcf, 0xcd, 0x57, 0x0f, 0x32, 0xc8, 0xce, 0x6d, 0xb2, 0xe7,
	0xf4, 0x32, 0xd7, 0x3e, 0x74, 0xe3, 0xf3, 0xf8, 0xf2, 0x60, 0x78, 0xca, 0xff, 0x5c, 0xbc, 0x76,
	0xf1, 0x71, 0x7b, 0x6f, 0x96, 0xa3, 0x7f, 0xeb, 0x8f, 0xb3, 0x68, 0xfc, 0xb3, 0xe9, 0xbf, 0x26,
	0xdd, 0x9d, 0xee, 0x7b, 0x98, 0x77, 0xee, 0x92, 0x7d, 0xa7, 0xbd, 0x25, 0xe3, 0xf5, 0xb7, 0x9b,
	0xed, 0x70, 0xb7, 0xc0, 0xb6, 0xfc, 0x77, 0x35, 0x7a, 0x5a, 0x97, 0x2c, 0xde, 0x94, 0x2c, 0xfe,
	0x2c, 0x59, 0xfc, 0x56, 0xb1, 0x68, 0x53, 0xb1, 0xe8, 0xbd, 0x62, 0xd1, 0x64, 0x98, 0x62, 0x98,
	0xe5, 0x8a, 0x03, 0x65, 0x02, 0xc8, 0x67, 0xe4, 0x05, 0x2a, 0xb8, 0x4a, 0x49, 0x14, 0x37, 0x22,
	0xa3, 0x69, 0xbe, 0xd0, 0xbe, 0xae, 0xdc, 0xd6, 0x6d, 0x6a, 0xa8, 0xff, 0x4d, 0x8e, 0xeb, 0xaf,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xde, 0x44, 0x3d, 0xa8, 0x82, 0x01, 0x00, 0x00,
}

func (m *InterchainQueryPacketData) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryPacketData) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryPacketData) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Request.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func (m *InterchainQueryPacketAck) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *InterchainQueryPacketAck) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *InterchainQueryPacketAck) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Response.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintPacket(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintPacket(dAtA []byte, offset int, v uint64) int {
	offset -= sovPacket(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *InterchainQueryPacketData) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Request.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func (m *InterchainQueryPacketAck) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Response.Size()
	n += 1 + l + sovPacket(uint64(l))
	return n
}

func sovPacket(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPacket(x uint64) (n int) {
	return sovPacket(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *InterchainQueryPacketData) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryPacketData: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryPacketData: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Request", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Request.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *InterchainQueryPacketAck) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: InterchainQueryPacketAck: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: InterchainQueryPacketAck: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Response", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPacket
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPacket
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Response.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPacket(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthPacket
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPacket(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPacket
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPacket
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPacket
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPacket
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPacket
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPacket        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPacket          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPacket = fmt.Errorf("proto: unexpected end of group")
)
